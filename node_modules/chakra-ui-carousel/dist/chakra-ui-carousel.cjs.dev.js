'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('@chakra-ui/react');
var React = require('react');
var rooks = require('rooks');
var framerMotion = require('framer-motion');
var icons = require('@chakra-ui/icons');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const Context = /*#__PURE__*/React.createContext(undefined);
const Provider = ({
  children
}) => {
  const [trackIsActive, setTrackIsActive] = React.useState(false);
  const [multiplier, setMultiplier] = React.useState(0.35);
  const [sliderWidth, setSliderWidth] = React.useState(0);
  const [activeItem, setActiveItem] = React.useState(0);
  const [constraint, setConstraint] = React.useState(0);
  const [itemWidth, setItemWidth] = React.useState(0);
  const [positions, setPositions] = React.useState([]);
  const initSliderWidth = React.useCallback(width => setSliderWidth(width), []);
  const value = React.useMemo(() => ({
    trackIsActive,
    setTrackIsActive,
    multiplier,
    sliderWidth,
    activeItem,
    setActiveItem,
    constraint,
    initSliderWidth,
    itemWidth,
    setMultiplier,
    setItemWidth,
    setConstraint,
    positions,
    setPositions
  }), [trackIsActive, setTrackIsActive, multiplier, sliderWidth, activeItem, setActiveItem, constraint, initSliderWidth, itemWidth, setMultiplier, setItemWidth, setConstraint, positions, setPositions]);
  return /*#__PURE__*/React__default["default"].createElement(Context.Provider, {
    value: value
  }, children);
};

const Item = ({
  index,
  gap,
  children
}) => {
  const context = React.useContext(Context);
  const {
    positions
  } = context;
  const [didUserTab, setDidUserTab] = React.useState(false);
  const handleFocus = () => context?.setTrackIsActive(true);
  const handleBlur = () => {
    didUserTab && index + 1 === positions.length && context?.setTrackIsActive(false);
    setDidUserTab(false);
  };
  const handleKeyUp = event => {
    if (!context) return;
    const {
      activeItem,
      constraint
    } = context;
    return event.key === "Tab" && !(activeItem === positions?.length - constraint) && context?.setActiveItem(index);
  };
  const handleKeyDown = event => event.key === "Tab" && setDidUserTab(true);
  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    onFocus: handleFocus,
    onBlur: handleBlur,
    onKeyUp: handleKeyUp,
    onKeyDown: handleKeyDown,
    w: `${context?.itemWidth}px`,
    _notLast: {
      mr: `${gap}px`
    },
    py: "4px"
  }, children);
};

const Slider = ({
  children,
  gap
}) => {
  const context = React.useContext(Context);
  const {
    initSliderWidth
  } = context;
  const [myRef, boundingClientRect] = rooks.useBoundingclientrectRef();
  React.useLayoutEffect(() => initSliderWidth(Math.round(boundingClientRect?.width ?? 0)), [boundingClientRect?.width, initSliderWidth]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Box, {
    ref: myRef,
    w: {
      base: "100%",
      md: `calc(100% + ${gap}px)`
    },
    ml: {
      base: 0,
      md: `-${gap / 2}px`
    },
    px: `${gap / 2}px`,
    position: "relative",
    overflow: "hidden",
    _before: {
      bgGradient: "linear(to-r, base.d400, transparent)",
      position: "absolute",
      w: `${gap / 2}px`,
      content: "''",
      zIndex: 1,
      h: "100%",
      left: 0,
      top: 0
    },
    _after: {
      bgGradient: "linear(to-l, base.d400, transparent)",
      position: "absolute",
      w: `${gap / 2}px`,
      content: "''",
      zIndex: 1,
      h: "100%",
      right: 0,
      top: 0
    }
  }, children));
};

/* eslint-disable @typescript-eslint/ban-ts-comment */
const MotionFlex = framerMotion.motion(react.Flex);
const Track = ({
  children
}) => {
  const context = React.useContext(Context);
  const {
    setTrackIsActive,
    trackIsActive,
    setActiveItem,
    activeItem,
    constraint,
    multiplier,
    itemWidth,
    positions
  } = context;
  const [dragStartPosition, setDragStartPosition] = React.useState(0);
  const controls = framerMotion.useAnimation();
  const x = framerMotion.useMotionValue(0);
  const node = React.useRef(null);
  const transitionProps = React.useMemo(() => ({
    stiffness: 400,
    type: "spring",
    damping: 60,
    mass: 3
  }), []);
  const handleDragStart = () => setDragStartPosition(positions[activeItem]);
  const handleDragEnd = (_, info) => {
    console.log(info);
    const distance = info.offset.x;
    const velocity = info.velocity.x * multiplier;
    const direction = velocity < 0 || distance < 0 ? 1 : -1;
    const extrapolatedPosition = dragStartPosition + (direction === 1 ? Math.min(velocity, distance) : Math.max(velocity, distance));
    const closestPosition = positions.reduce((prev, curr) => {
      return Math.abs(curr - extrapolatedPosition) < Math.abs(prev - extrapolatedPosition) ? curr : prev;
    }, 0);
    if (!(closestPosition < positions[positions.length - constraint])) {
      setActiveItem(positions.indexOf(closestPosition));
      controls.start({
        x: closestPosition,
        transition: {
          velocity: info.velocity.x,
          ...transitionProps
        }
      });
    } else {
      setActiveItem(positions.length - constraint);
      controls.start({
        x: positions[positions.length - constraint],
        transition: {
          velocity: info.velocity.x,
          ...transitionProps
        }
      });
    }
  };
  const handleResize = React.useCallback(() => controls.start({
    x: positions[activeItem],
    transition: {
      ...transitionProps
    }
  }), [activeItem, controls, positions, transitionProps]);
  const handleClick = React.useCallback(event =>
  // @ts-expect-error
  node?.current?.contains(event.target) ? setTrackIsActive(true) : setTrackIsActive(false), [setTrackIsActive]);
  const handleKeyDown = React.useCallback(event => {
    if (trackIsActive) {
      if (activeItem < positions.length - constraint) {
        if (event.key === "ArrowRight" || event.key === "ArrowUp") {
          event.preventDefault();
          // @ts-expect-error
          setActiveItem(prev => {
            return prev + 1;
          });
        }
      }
      if (activeItem > positions.length - positions.length) {
        if (event.key === "ArrowLeft" || event.key === "ArrowDown") {
          event.preventDefault();
          // @ts-expect-error
          setActiveItem(prev => {
            return prev - 1;
          });
        }
      }
    }
  }, [trackIsActive, setActiveItem, activeItem, constraint, positions.length]);
  React.useEffect(() => {
    handleResize();
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("mousedown", handleClick);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("mousedown", handleClick);
    };
  }, [handleClick, handleResize, handleKeyDown, positions]);
  React.useEffect(() => {
    console.log("activeItem", activeItem);
  }, [activeItem]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, itemWidth && /*#__PURE__*/React__default["default"].createElement(react.VStack, {
    overflowX: "hidden",
    ref: node,
    spacing: 5,
    alignItems: "stretch"
  }, /*#__PURE__*/React__default["default"].createElement(MotionFlex, {
    dragConstraints: node,
    onDragStart: handleDragStart,
    onDragEnd: handleDragEnd,
    animate: controls,
    style: {
      x
    },
    drag: "x",
    _active: {
      cursor: "grabbing"
    },
    minWidth: "min-content",
    flexWrap: "nowrap",
    cursor: "grab"
  }, children)));
};

const Carousel = ({
  children,
  gap
}) => {
  const context = React.useContext(Context);
  const {
    setItemWidth,
    sliderWidth,
    setMultiplier,
    setConstraint,
    itemWidth,
    setPositions
  } = context;
  const {
    breakpoints
  } = react.useTheme();
  React.useEffect(() => {
    const newPositions = children?.map((_, index) => -Math.abs((itemWidth + gap) * index));
    setPositions(newPositions);
  }, [children, gap, itemWidth, setPositions]);
  const [isBetweenBaseAndMd] = react.useMediaQuery(`(min-width: ${breakpoints?.base}) and (max-width: ${breakpoints?.md})`);
  const [isBetweenMdAndXl] = react.useMediaQuery(`(min-width: ${breakpoints?.md}) and (max-width: ${breakpoints?.xl})`);
  const [isGreaterThanXL] = react.useMediaQuery(`(min-width: ${breakpoints?.xl})`);
  React.useEffect(() => {
    if (isBetweenBaseAndMd) {
      setItemWidth(sliderWidth - gap);
      setMultiplier(0.65);
      setConstraint(1);
    }
    if (isBetweenMdAndXl) {
      setItemWidth(sliderWidth / 2 - gap);
      setMultiplier(0.5);
      setConstraint(2);
    }
    if (isGreaterThanXL) {
      setItemWidth(sliderWidth / 3 - gap);
      setMultiplier(0.35);
      setConstraint(3);
    }
  }, [isBetweenBaseAndMd, isBetweenMdAndXl, isGreaterThanXL, sliderWidth, gap, setItemWidth, setMultiplier, setConstraint]);
  return /*#__PURE__*/React__default["default"].createElement(Slider, {
    gap: gap
  }, /*#__PURE__*/React__default["default"].createElement(Track, null, children.map((child, index) => /*#__PURE__*/React__default["default"].createElement(Item, {
    gap: gap,
    key: index,
    index: index
  }, child))));
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

const LeftButton = ({
  customIcon,
  ...props
}) => {
  const context = React.useContext(Context);
  const {
    setTrackIsActive,
    activeItem,
    positions,
    setActiveItem
  } = context;
  const handleFocus = () => setTrackIsActive(true);
  const handleDecrementClick = () => {
    setTrackIsActive(true);
    !(activeItem === positions.length - positions.length) &&
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    setActiveItem(prev => prev - 1);
  };
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Button, _extends({}, props, {
    onClick: handleDecrementClick,
    onFocus: handleFocus,
    zIndex: 2,
    minW: 0
  }), customIcon ? /*#__PURE__*/React__default["default"].createElement(react.Box, null, customIcon) : /*#__PURE__*/React__default["default"].createElement(icons.ChevronLeftIcon, {
    boxSize: 9
  })));
};

const RightButton = ({
  customIcon,
  ...props
}) => {
  const context = React.useContext(Context);
  const {
    setTrackIsActive,
    activeItem,
    constraint,
    positions,
    setActiveItem
  } = context;
  const handleFocus = () => setTrackIsActive(true);
  const handleIncrementClick = () => {
    setTrackIsActive(true);
    !(activeItem === positions.length - constraint) &&
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    setActiveItem(prev => prev + 1);
  };
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Button, _extends({}, props, {
    onClick: handleIncrementClick,
    onFocus: handleFocus,
    zIndex: 2,
    minW: 0
  }), customIcon ? /*#__PURE__*/React__default["default"].createElement(react.Box, null, customIcon) : /*#__PURE__*/React__default["default"].createElement(icons.ChevronRightIcon, {
    boxSize: 9
  })));
};

exports.Carousel = Carousel;
exports.Context = Context;
exports.LeftButton = LeftButton;
exports.Provider = Provider;
exports.RightButton = RightButton;
